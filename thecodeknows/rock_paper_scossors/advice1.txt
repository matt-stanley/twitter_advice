Consider getting rid of the commented out code to make it easier to read.

Alright, let's do some human debugging. We'll follow the code in the same order the computer would.

We declare all the variables and functions, and the code really starts running when we call game() near the bottom. So scroll back up to the game() function.

Every round, we set the playerSelection. But we should also set the computerSelection every round.
*** So move the following line inside this function, just below the playerSelection declaration:

 let computerSelection = computerPlay();

Now comes the reason you asked for help. We call playRound() with two parameters: playerSelection and computerSelection.
So scroll up to playRound and look at the function declaration.

We haven't set the function up to accept parameters.

ABOUT SCOPE
  The 'let' keyword tell JavaScript that the variable should be block-scope.
  That means that it is only visible within that function, 'for' loop, etc.
  That's a good thing.

  But how do we let outside functions know about the playerSelection and computerSelection?

PARAMETERS
  When you need another function to know about a block-scope variable, pass it in as a parameter:

  function divide(a, b){
    return a / b;
  }

  Then, when we call it, say divide(9, 3).
  The function will set a to 9 and b to 3.
  The order does matter! The function doesn't care what the variable names are outside of itself.
  It only cares about the values passed in.

*** So, playRound() needs to be set up to receive two variables: playerSelection and computerSelection.

Just mind the order! Whatever order you put them in when you declare the function, you have to put them in that order when you call it!